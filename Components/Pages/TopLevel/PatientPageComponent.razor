@rendermode InteractiveServer
@using PotatoEMR.Components.Pages.PatientLevel

@if (pat != null)
{
    <div id="PatientSidebar">
        @* Patient Photo or Placeholder *@
        @if (!string.IsNullOrEmpty(patientPhotoSrc))
        {
            <img src="@patientPhotoSrc" alt="Patient photo" style="width:150px;height:150px;object-fit:cover;" />
        }
        else
        {
            <svg width="150px" height="150px">
                <path fill="#ccc" d="M 104.68731,56.689353 C 102.19435,80.640493 93.104981,97.26875 74.372196,97.26875 55.639402,97.26875 46.988823,82.308034 44.057005,57.289941 41.623314,34.938838 55.639402,15.800152 74.372196,15.800152 c 18.732785,0 32.451944,18.493971 30.315114,40.889201 z"></path>
                <path fill="#ccc" d="M 92.5675 89.6048 C 90.79484 93.47893 89.39893 102.4504 94.86478 106.9039 C 103.9375 114.2963 106.7064 116.4723 118.3117 118.9462 C 144.0432 124.4314 141.6492 138.1543 146.5244 149.2206 L 4.268444 149.1023 C 8.472223 138.6518 6.505799 124.7812 32.40051 118.387 C 41.80992 116.0635 45.66513 113.8823 53.58659 107.0158 C 58.52744 102.7329 57.52583 93.99267 56.43084 89.26926 C 52.49275 88.83011 94.1739 88.14054 92.5675 89.6048 z"></path>
            </svg>
        }
        @* Name, Gender, Age *@
        @foreach (HumanName name in pat.Name)
        {
            <p>@name.ToString()</p>
        }
        @* Name, Gender, Age *@
        @foreach (HumanName name in pat.Name)
        {
            <p>@name.ToString()</p>
        }
        <span>@pat.Gender</span>
        <span>@GetAge(pat.BirthDate)</span>
        <span>@pat.BirthDate</span>
        @* Responsible Provider *@
        <div>
            @if (doctorPhotoSrc != null)
            {
                <img src="@doctorPhotoSrc" alt="Doctor photo" style="width:50px;height:50px;object-fit:cover;" />
            }
            else
            {
                <svg width="50px" height="50px" viewBox="0 0 150 150">
                    <path fill="#ccc" d="M 104.68731,56.689353 C 102.19435,80.640493 93.104981,97.26875 74.372196,97.26875 55.639402,97.26875 46.988823,82.308034 44.057005,57.289941 41.623314,34.938838 55.639402,15.800152 74.372196,15.800152 c 18.732785,0 32.451944,18.493971 30.315114,40.889201 z"></path>
                    <path fill="#ccc" d="M 92.5675 89.6048 C 90.79484 93.47893 89.39893 102.4504 94.86478 106.9039 C 103.9375 114.2963 106.7064 116.4723 118.3117 118.9462 C 144.0432 124.4314 141.6492 138.1543 146.5244 149.2206 L 4.268444 149.1023 C 8.472223 138.6518 6.505799 124.7812 32.40051 118.387 C 41.80992 116.0635 45.66513 113.8823 53.58659 107.0158 C 58.52744 102.7329 57.52583 93.99267 56.43084 89.26926 C 52.49275 88.83011 94.1739 88.14054 92.5675 89.6048 z"></path>
                </svg>
            }
            @if (doctor == null)
            {
                <p>Doctor: loading...</p>
            }
            else if (doctor.Name == null || doctor.Name.Count == 0)
            {
                <p>Unnamed Doctor</p>
            }
            else
            {
                foreach (var name in doctor.Name)
                {
                    <p>Doctor: @name.ToString()</p>
                }
            }
        </div>
        @* Allergies *@
        <p>Allergies:</p>
        @if (allergies == null)
        {
            <p>Loading...</p>
        }
        else if (allergies.Count == 0)
        {
            <p>None recorded</p>
        }
        else
        {
            <ul>
                @foreach (var allergy in allergies)
                {
                    <li>@allergy</li>
                }
            </ul>
        }
        @* Admission Info *@
        <p>Date Admitted: @admitDate</p>
        <p>Reason Admitted: @admitReason</p>
        @* Height and Weight *@
        <p>Height: @heightDisplay</p>
        <p>Weight: @weightDisplay</p>
        @* Lab Results *@
        <p>Lab Results:</p>
        @if (labResults == null)
        {
            <p>Loading...</p>
        }
        else if (labResults.Count == 0)
        {
            <p>None recorded</p>
        }
        else
        {
            <ul>
                @foreach (var lab in labResults)
                {
                    <li>@lab</li>
                }
            </ul>
        }
        @* Active Medications *@
        <p>Active Medications:</p>
        @if (medications == null)
        {
            <p>Loading...</p>
        }
        else if (medications.Count == 0)
        {
            <p>None recorded</p>
        }
        else
        {
            <ul>
                @foreach (var med in medications)
                {
                    <li>@med</li>
                }
            </ul>
        }
    </div>
    <nav>
        <a href="#" @onclick="@(() => ClickPatientPage(typeof(Allergies_pComponent)))">Allergies</a>
        <a href="#" @onclick="@(() => ClickPatientPage(typeof(Immunizations_pComponent)))">Immunizations</a>
        <a href="#" @onclick="@(() => ClickPatientPage(typeof(ProblemList_pComponent)))">Problem List</a>
    </nav>
    <div id="patient-content">
        @if(patientPageType != null)
        {
            //patient page starts null, so its server request can be included in patient page initial batch
            //clicking ShowPatientPage() will not include request, so page will be responsible for making request
            //so patient pages have to handle either given parameters, or null parameters for their own request
            <DynamicComponent Type="@patientPageType" Parameters="@patientPageParameters" />            
        }
    </div>
}

@code {
    [Parameter]
    public Patient? pat { get; set; }

    //shows allergy by default on patient page
    private Type? patientPageType = null;
    private Dictionary<string, object>? patientPageParameters = null;
    private void ClickPatientPage(Type componentType)
    {
        // when you click page, the page makes new request of its own using patient id
        patientPageType = componentType;
        patientPageParameters = new Dictionary<string, object> { { "PatientId", pat?.Id ?? string.Empty } };
    }

    private string? patientPhotoSrc = null;
    private List<string>? allergies = null;
    private List<string>? medications = null;
    private List<string>? labResults = null;
    private string admitDate = "Loading...";
    private string admitReason = "Loading...";
    private string heightDisplay = "Loading...";
    private string weightDisplay = "Loading...";
    private Practitioner? doctor = null;
    private string? doctorPhotoSrc = null;

    protected override async Task OnParametersSetAsync()
    {
        //When clicking a new patient from results, fields wont reset until FHIR server returns data
        //which could take seconds
        //as same component is reused for new patient, will have old fields until patient data comes back
        //so reset fields immediately when choosing new patient
        patientPhotoSrc = null;
        allergies = null;
        medications = null;
        labResults = null;
        admitDate = "Loading...";
        admitReason = "Loading...";
        heightDisplay = "Loading...";
        weightDisplay = "Loading...";
        doctor = null;
        doctorPhotoSrc = null;

        if (pat != null && !string.IsNullOrEmpty(pat.Id))
        {
            await LoadAllPatientDataBatch(pat.Id);
            patientPhotoSrc = GetPatientPhotoSrc();
            doctorPhotoSrc = GetDoctorPhotoSrc();
        }
    }

    private async Task LoadAllPatientDataBatch(string patientId)
    {
        try
        {
            var client = GlobalFHIRconfig.client;
            var builder = new TransactionBuilder(client.Endpoint.ToString(), Bundle.BundleType.Batch);

            // Bundle all searches in one single transaction to load page faster (eg rate limit 1s per request))
            builder.Search(new SearchParams().Where($"patient={patientId}"), "AllergyIntolerance");
            builder.Search(new SearchParams().Where($"patient={patientId}").Where("status=active"), "MedicationRequest");
            builder.Search(new SearchParams().Where($"patient={patientId}").Where("category=laboratory").OrderBy("-date"), "Observation");
            builder.Search(new SearchParams().Where($"_id={patientId}").Include("Patient:general-practitioner"),"Patient");
            builder.Search(new SearchParams().Where($"patient={patientId}").Where("code=8302-2").OrderBy("-date").LimitTo(1), "Observation"); // Height
            builder.Search(new SearchParams().Where($"patient={patientId}").Where("code=29463-7").OrderBy("-date").LimitTo(1), "Observation"); // Weight
            builder.Search(new SearchParams().Where($"patient={patientId}").OrderBy("-date").Include("Encounter:participant"), "Encounter");
            //encounter includes participants because it might have their doctor info

            var batchBundle = builder.ToBundle();
            var response = await client.TransactionAsync(batchBundle);

            if (response?.Entry != null && response.Entry.Count >= 6)
            {
                allergies = ProcessAllergiesResponse(response.Entry[0]);
                patientPageParameters = new Dictionary<string, object> { ["AllergyBundle"] = response.Entry[0].Resource };
                patientPageType = typeof(Allergies_pComponent); //by default allergies page
                //pass allergies in here, to include request in batch on initial patiend load
                medications = ProcessMedicationsResponse(response.Entry[1]);
                labResults = ProcessLabResultsResponse(response.Entry[2]);
                doctor = ProcessGeneralPractitioner(response.Entry[3]); //encounter participant also sets doctor
                heightDisplay = ProcessHeightResponse(response.Entry[4]);
                weightDisplay = ProcessWeightResponse(response.Entry[5]);
                ProcessEncounterResponse(response.Entry[6]); //admit date and reason, maybe set doctor
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error loading patient data batch: " + e.Message);
            // Set error states
            allergies = new List<string>();
            medications = new List<string>();
            labResults = new List<string>();
            admitDate = "Error";
            admitReason = "Error";
            heightDisplay = "Error";
            weightDisplay = "Error";
        }
    }

    private List<string> ProcessAllergiesResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle allergyBundle && allergyBundle.Entry != null)
            {
                return allergyBundle.Entry
                    .Select(e => (AllergyIntolerance)e.Resource)
                    .Where(a => a.Code != null)
                    .Select(a => a.Code.Text ?? a.Code.Coding?.FirstOrDefault()?.Display ?? "Unknown")
                    .ToList();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing allergies: " + e.Message);
        }
        return new List<string>();
    }

    private List<string> ProcessMedicationsResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle medicationBundle && medicationBundle.Entry != null)
            {
                return medicationBundle.Entry
                    .Select(e => (MedicationRequest)e.Resource)
                    .Select(mr =>
                    {
                        if (mr.Medication is CodeableConcept cc)
                            return cc.Text ?? cc.Coding?.FirstOrDefault()?.Display ?? "Unknown";
                        return "Unknown";
                    })
                    .ToList();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing medications: " + e.Message);
        }
        return new List<string>();
    }

    private List<string> ProcessLabResultsResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle labBundle && labBundle.Entry != null)
            {
                return labBundle.Entry
                    .Select(e => (Observation)e.Resource)
                    .Select(obs =>
                    {
                        if (!string.IsNullOrEmpty(obs.Code?.Text))
                            return obs.Code.Text;
                        else if (obs.Code?.Coding != null && obs.Code.Coding.Count > 0)
                            return obs.Code.Coding.First().Display ?? "Unknown";
                        return "Unknown";
                    })
                    .ToList();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing lab results: " + e.Message);
        }
        return new List<string>();
    }

    private Practitioner? ProcessGeneralPractitioner(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle bundle && bundle.Entry != null)
            {
                var practitionerEntry = bundle.Entry.FirstOrDefault(e => e.Resource is Practitioner);
                if (practitionerEntry != null)
                {
                    return (Practitioner)practitionerEntry.Resource;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing general practitioner: " + e.Message);
        }
        //didn't find a doctor here, so setting it to a new "None" guy
        //but might find one later associated with encounter. could also add careTeam lookup
        Practitioner noneDoctor = new Practitioner();
        noneDoctor.Name.Add(new HumanName().WithGiven("None"));
        return noneDoctor;
    }

    private async Task ProcessDoctorFromEncounters(IList<Bundle.EntryComponent> encounters, string patientId)
    {
        try
        {
            Practitioner? foundPractitioner = null;

            // 1. Look for attending physician
            foreach (var entry in encounters)
            {
                var encounter = (Encounter)entry.Resource;
                var attending = encounter.Participant?
                    .FirstOrDefault(p =>
                        p.Type != null &&
                        p.Type.Any(t =>
                            t.Coding != null &&
                            t.Coding.Any(c =>
                                c.Code == "ATND" &&
                                (c.System == null || c.System == "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
                            )
                        ) &&
                        p.Individual != null &&
                        p.Individual.Reference != null &&
                        p.Individual.Reference.StartsWith("Practitioner/")
                    );
                if (attending != null)
                {
                    var practitionerId = attending.Individual.Reference.Split('/').Last();
                    foundPractitioner = await GlobalFHIRconfig.client.ReadAsync<Practitioner>($"Practitioner/{practitionerId}");
                    break;
                }
            }

            // 2. If not found, look for any physician
            if (foundPractitioner == null)
            {
                foreach (var entry in encounters)
                {
                    var encounter = (Encounter)entry.Resource;
                    var anyPhysician = encounter.Participant?
                        .FirstOrDefault(p =>
                            p.Individual != null &&
                            p.Individual.Reference != null &&
                            p.Individual.Reference.StartsWith("Practitioner/")
                        );
                    if (anyPhysician != null)
                    {
                        var practitionerId = anyPhysician.Individual.Reference.Split('/').Last();
                        foundPractitioner = await GlobalFHIRconfig.client.ReadAsync<Practitioner>($"Practitioner/{practitionerId}");
                        break;
                    }
                }
            }

            // 3. If still not found, check Patient.GeneralPractitioner
            if (foundPractitioner == null && pat?.GeneralPractitioner != null && pat.GeneralPractitioner.Count > 0)
            {
                var gpRef = pat.GeneralPractitioner.FirstOrDefault(r => r.Reference != null && r.Reference.StartsWith("Practitioner/"));
                if (gpRef != null)
                {
                    var practitionerId = gpRef.Reference.Split('/').Last();
                    foundPractitioner = await GlobalFHIRconfig.client.ReadAsync<Practitioner>($"Practitioner/{practitionerId}");
                }
            }

            // Set doctor
            if (foundPractitioner != null && foundPractitioner.Name != null && foundPractitioner.Name.Count > 0)
            {
                doctor = foundPractitioner;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing doctor from encounters: " + e.Message);
        }
    }

    private string ProcessHeightResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle heightBundle && heightBundle.Entry != null && heightBundle.Entry.Count > 0)
            {
                var obs = (Observation)heightBundle.Entry[0].Resource;
                if (obs.Value is Quantity q && q.Value != null)
                {
                    if (q.Unit != null && q.Unit.Trim().ToLower() == "cm")
                    {
                        var cm = Convert.ToDecimal(q.Value);
                        var totalInches = cm / 2.54m;
                        var feet = (int)(totalInches / 12);
                        var inches = (int)Math.Round(totalInches % 12);
                        return $"{cm}cm ({feet}' {inches}'')";
                    }
                    return $"{Math.Round(Convert.ToDecimal(q.Value), 1)} {q.Unit}";
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing height: " + e.Message);
        }
        return "None";
    }

    private string ProcessWeightResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle weightBundle && weightBundle.Entry != null && weightBundle.Entry.Count > 0)
            {
                var obs = (Observation)weightBundle.Entry[0].Resource;
                if (obs.Value is Quantity q && q.Value != null && !string.IsNullOrEmpty(q.Unit))
                {
                    return $"{Math.Round(Convert.ToDecimal(q.Value), 1)} {q.Unit}";
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing weight: " + e.Message);
        }
        return "None";
    }

    private void ProcessEncounterResponse(Bundle.EntryComponent entry)
    {
        try
        {
            if (entry.Resource is Bundle encounterBundle && encounterBundle.Entry?.Count > 0)
            {
                // Find most recent encounter
                var mostRecent = encounterBundle.Entry
                    .Select(e => e.Resource as Encounter)
                    .Where(e => e?.Period?.Start != null)
                    .OrderByDescending(e => e?.Period.Start)
                    .FirstOrDefault();

                if (mostRecent != null)
                {
                    admitDate = DateTime.TryParse(mostRecent.Period.Start, out var dt)
                        ? dt.ToString("g")
                        : mostRecent.Period.Start;
                    admitReason = mostRecent.ReasonCode?.FirstOrDefault()?.Text ?? "Unknown";

                    // Set doctor from first Practitioner participant in encounter
                    var practitionerRef = mostRecent.Participant?
                        .Select(p => p.Individual?.Reference)
                        .FirstOrDefault(r => r != null && r.StartsWith("Practitioner/"));

                    if (!string.IsNullOrEmpty(practitionerRef))
                    {
                        var practitionerId = practitionerRef.Split('/').Last();
                        doctor = encounterBundle.Entry
                            .Select(e => e.Resource)
                            .OfType<Practitioner>()
                            .FirstOrDefault(p => p.Id == practitionerId);
                    }
                    return;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error processing encounter: " + e.Message);
        }
        admitDate = "None";
        admitReason = "None";
    }

    private string GetAge(string birthDate)
    {
        if (DateTime.TryParse(birthDate, out var dob))
        {
            var today = DateTime.Today;
            int years = today.Year - dob.Year;
            int months = today.Month - dob.Month;
            int days = today.Day - dob.Day;

            if (days < 0)
            {
                months--;
                days += DateTime.DaysInMonth(today.Year, (today.Month == 1 ? 12 : today.Month - 1));
            }
            if (months < 0)
            {
                years--;
                months += 12;
            }

            if (years < 1)
            {
                return $"{months}m/{days}d,";
            }
            else if (years < 10)
            {
                return $"{years}y/{months}m,";
            }
            else
            {
                return $"{years}y.o.,";
            }
        }
        return "Unknown";
    }

    private string? GetPatientPhotoSrc()
    {
        if (pat?.Photo != null && pat.Photo.Count > 0)
        {
            var photo = pat.Photo.First();
            if (!string.IsNullOrEmpty(photo.Url))
            {
                return photo.Url;
            }
            else if (photo.Data != null && photo.Data.Length > 0 && !string.IsNullOrEmpty(photo.ContentType))
            {
                var base64 = Convert.ToBase64String(photo.Data);
                return $"data:{photo.ContentType};base64,{base64}";
            }
        }
        return null;
    }

    private string? GetDoctorPhotoSrc()
    {
        if (doctor?.Photo != null && doctor.Photo.Count > 0)
        {
            var photo = doctor.Photo.First();
            if (!string.IsNullOrEmpty(photo.Url))
            {
                return photo.Url;
            }
            else if (photo.Data != null && photo.Data.Length > 0 && !string.IsNullOrEmpty(photo.ContentType))
            {
                var base64 = Convert.ToBase64String(photo.Data);
                return $"data:{photo.ContentType};base64,{base64}";
            }
        }
        return null;
    }
}