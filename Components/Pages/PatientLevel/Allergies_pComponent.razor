@if (Allergies == null)
{
    <p>Loading allergies...</p>
}
else if (Allergies.Count == 0)
{
    <p>No allergies recorded.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Allergen</th>
                <th>Severity</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var allergy in Allergies)
            {
                <tr>
                    <td>@(allergy.Code?.Text ?? allergy.Code?.Coding?.FirstOrDefault()?.Display ?? "-")</td>
                    <td>
                        @(
                            allergy.Reaction?.FirstOrDefault()?.Severity != null
                                ? allergy.Reaction.First().Severity
                                : "-"
                        )
                    </td>
                    <td>
                        @{
                            /*
                            * fhir gives a number of ways to record allergy time:
                            * ..onset[x]     0..1        When allergy or intolerance was identified
                                *  ....onsetDateTime       dateTime
                                * ....onsetAge                 Age
                                * ....onsetPeriod           Period
                                * ....onsetRange            Range
                                * ....onsetString           string
                            * ... recordedDate       0..1    dateTime Date allergy or intolerance was first recorded
                            * lastOccurrence		0..1	dateTime	Date(/time) of last known occurrence of a reaction
                            * so date field could mean different things in table
                            */
                                                    string dateStr = "-";

                            if (!string.IsNullOrEmpty(allergy.LastOccurrence))
                            {
                                dateStr = allergy.LastOccurrence;
                            }
                            else if (allergy.Onset != null)
                            {
                                if (allergy.Onset is Hl7.Fhir.Model.FhirDateTime onsetDateTime)
                                    dateStr = onsetDateTime.Value;
                                else if (allergy.Onset is Hl7.Fhir.Model.Age onsetAge)
                                {
                                    if(onsetAge.Value != null)
                                    {
                                        if (onsetAge.Unit == null)
                                            dateStr = $"age {onsetAge.Value}";
                                        else
                                            dateStr = $"age {onsetAge.Value} {onsetAge.Unit}";
                                    }
                                }
                                else if (allergy.Onset is Hl7.Fhir.Model.Period onsetPeriod)
                                    dateStr = onsetPeriod.End;
                                else if (allergy.Onset is Hl7.Fhir.Model.Range onsetRange)
                                    dateStr = $"{onsetRange.Low.ToString()}-{onsetRange.High.ToString()}";
                                else if (allergy.Onset is Hl7.Fhir.Model.FhirString onsetString)
                                    dateStr = onsetString.Value;
                            }
                            else if (!string.IsNullOrEmpty(allergy.RecordedDate))
                            {
                                dateStr = allergy.RecordedDate;
                            }

                            if (DateTime.TryParse(dateStr, out var dt))
                                dateStr = dt.ToString("yyyy-MM-dd");
                        }
                        @dateStr
                    </td>

                    <td>
                        <UI_Popup DataColor=@Colors.Tertiary>
                            <Trigger>
                                <span>Details</span>
                            </Trigger>
                            <Header>
                                @(allergy.Code?.Text ?? allergy.Code?.Coding?.FirstOrDefault()?.Display ?? "")
                            </Header>
                            <Body>
                                <div style="display: grid; grid-template-columns: repeat(12, 1fr); gap: 5px;">
                                    <!-- Agent: label+input spans 6 columns -->
                                    <div style="grid-column: 1 / span 6; display: flex; align-items: center; gap: 5px;">
                                        <label for="agent">Agent:</label>
                                        <input type="text" id="agent" value="@(allergy.Code?.Text ?? allergy.Code?.Coding?.FirstOrDefault()?.Display)" />
                                    </div>
                                    <!-- Comments: label above textarea, spans 6 columns -->
                                    <div style="grid-column: 7 / span 6; display: flex; flex-direction: column;">
                                        <label for="comments">Comments:</label>
                                        <textarea id="comments"></textarea>
                                    </div>

                                    <!-- Reactions and Reaction type stacked in the same 3-column cell -->
                                    <div style="grid-column: 1 / span 3; display: flex; flex-direction: column; gap: 5px;">
                                        <div>
                                            <label>Reactions:</label>
                                            <div style="display: flex; flex-direction: column; flex: 1;">
                                                @for (int i = 0; i < 3; i++)
                                                {
                                                    var manifestation = allergy.Reaction?.FirstOrDefault()?.Manifestation?.ElementAtOrDefault(i);
                                                    <input type="text" value="@(manifestation?.Text ?? manifestation?.Coding?.FirstOrDefault()?.Display)" />
                                                }
                                            </div>
                                        </div>
                                        <div >
                                            <label for="reaction-type">Reaction type:</label>
                                            <select id="reaction-type" @bind="allergy.Type">
                                                @foreach (var type in Enum.GetValues(typeof(AllergyIntolerance.AllergyIntoleranceType)).Cast<AllergyIntolerance.AllergyIntoleranceType>())
                                                {
                                                    <option value="@type">@type</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <!-- Severity: label+input spans 3 columns -->
                                    <div style="grid-column: 4 / span 3;">
                                        <div >
                                            <label for="severity">Severity:</label>
                                            <input type="text" id="severity" value="@(allergy.Reaction?.FirstOrDefault()?.Severity?.ToString() ?? "")" />
                                        </div>
                                        <div style="display: flex; align-items: center; gap: 5px; margin-top: 10px;">
                                            <label for="date-noted">Noted:</label>
                                            <input type="text" id="date-noted" value="@(allergy.RecordedDate ?? "")" />
                                        </div>
                                    </div>
                                </div>
                            </Body>
                            <Footer>
                                <UI_Button DataColor=@Colors.Primary @onclick="() => saveAllergy(allergy)">Save</UI_Button>
                                <UI_Button DataColor=@Colors.Danger @onclick="myfunc">Delete</UI_Button>
                                <UI_Button DataColor=@Colors.Danger @onclick="myfunc">Close</UI_Button>
                            </Footer>
                        </UI_Popup>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<p>hello</p>

@code {
    [Parameter]
    public Bundle? AllergyBundle { get; set; }

    [Parameter]
    public string? PatientId { get; set; }

    private List<AllergyIntolerance>? Allergies { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (AllergyBundle != null)
        {
            Allergies = AllergyBundle.Entry
                .Where(e => e.Resource is AllergyIntolerance)
                .Select(e => (AllergyIntolerance)e.Resource)
                .ToList();
        }
        else if (!string.IsNullOrEmpty(PatientId))
        {
            try
            {
                Allergies = null;
                var bundle = await GlobalFHIRconfig.client.SearchAsync<AllergyIntolerance>(new[] { $"patient={PatientId}" });
                Allergies = bundle?.Entry
                    .Where(e => e.Resource is AllergyIntolerance)
                    .Select(e => (AllergyIntolerance)e.Resource)
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Allergies_pComponent error: {ex.Message}");
                Allergies = null;
            }
        }
        else
        {
            Allergies = null;
        }
    }
    private async Task myfunc(MouseEventArgs args)
    {
     
    }

    private async Task saveAllergy(AllergyIntolerance allergy)
    {
        try
        {
            if (string.IsNullOrEmpty(allergy.Id))
            {
                var result = await GlobalFHIRconfig.client.CreateAsync(allergy);
                Console.WriteLine($"Created allergy: {result.Id}");
            }
            else
            {
                var result = await GlobalFHIRconfig.client.UpdateAsync(allergy);
                Console.WriteLine($"Updated allergy: {result.Id}");
            }
            Console.WriteLine("allergy type: " + allergy.Type);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving allergy: {ex.Message}");
        }
    }
}
