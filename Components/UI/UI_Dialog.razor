@code {
    [Parameter] public RenderFragment? Trigger { get; set; }
    [Parameter] public RenderFragment? Title { get; set; }
    [Parameter] public RenderFragment? Description { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }

    private bool isOpen = false;

    private double startX, startY;
    private double offsetX = 100, offsetY = 100;

    private void OpenDialog() => isOpen = true;
    private void CloseDialog() => isOpen = false;

    private void OnDragStart(DragEventArgs args)
    {
        startX = args.ClientX;
        startY = args.ClientY;
    }

    private void OnDrag(DragEventArgs args)
    {
        offsetX += args.ClientX - startX;
        offsetY += args.ClientY - startY;
        startX = args.ClientX;
        startY = args.ClientY;
        StateHasChanged();
    }

    private void OnDragEnd(DragEventArgs args)
    {
        offsetX += args.ClientX - startX;
        offsetY += args.ClientY - startY;
    }
}
<div>
    <span @onclick="OpenDialog" style="cursor: pointer;">
        @Trigger
    </span>

    @if (isOpen)
    {
        <div draggable="true"
             @ondragstart="OnDragStart"
             @ondrag="OnDrag"
             @ondragend="OnDragEnd"
             style="position: absolute; top: @(offsetY)px; left: @(offsetX)px; border: 1px solid #ccc; z-index: 1000; background: white; padding: 1rem; border-radius: 1rem; box-shadow: 0 4px 12px rgba(0,0,0,0.2); width: 100%; max-width: 600px;">
            <div class="mb-4 cursor-move">
                <h2 class="text-xl font-semibold">@Title</h2>
                <p class="text-gray-600">@Description</p>
            </div>
            <div class="mb-4">
                @Body
            </div>
            <div class="flex justify-end gap-2">
                @Footer
                <button class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300" @onclick="CloseDialog">Close</button>
            </div>
        </div>
    }
</div>
